{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-dd.ts","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack-h5.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/h5/dd-base-impl.ts","webpack://GridStack/./src/h5/dd-draggable.ts","webpack://GridStack/./src/h5/dd-droppable.ts","webpack://GridStack/./src/h5/dd-element.ts","webpack://GridStack/./src/h5/dd-manager.ts","webpack://GridStack/./src/h5/dd-resizable-handle.ts","webpack://GridStack/./src/h5/dd-resizable.ts","webpack://GridStack/./src/h5/dd-utils.ts","webpack://GridStack/./src/h5/gridstack-dd-native.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDD","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","_itemRemoving","remove","node","undefined","grid","_isAboutToRemove","classList","add","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","acceptWidgets","droppable","gridPos","cellHeight","cellWidth","onDrag","event","helper","rec","getBoundingClientRect","left","top","ui","position","_temporaryRemoved","x","Math","max","round","y","autoPosition","engine","nodeBoundFix","willItFit","off","_willFitPos","Utils","copyPos","_onStartMoving","_dragOrResize","accept","canAccept","selector","matches","maxRow","n","w","h","minW","minH","on","_leave","box","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","wasAdded","placeholder","parentElement","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","cloneNode","removePositioningStyles","_writeAttr","appendChild","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","window","setTimeout","_prepareDragDropByNode","removeNode","_setupRemoveDrop","removable","trashEl","document","querySelector","isDroppable","removableOptions","setupDragIn","_dragIn","_dragInOptions","dragIn","dragInOptions","revert","handle","scroll","appendTo","dd","getElements","forEach","isDraggable","noMove","disableDrag","noResize","disableResize","onStartMoving","target","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","start","stop","drag","resize","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","width","height","rect","moveNodeCheck","_skipDown","subGrid","onParentResize","movable","els","val","disable","enableMove","enableResize","_triggerEvent","enable","doEnable","nodes","pluginClass","ddi","registerPlugin","GridStackEngine","column","onChange","_float","float","batchMode","_prevFloat","saveInitial","_packNodes","_notify","nn","_hasLocked","opt","_sortNodes","nested","swap","area","_useEntireRowArea","skip","didMove","newOpt","pack","moved","locked","moveNode","skip2","find","isIntercepted","filter","o","collides","_rect","r0","r","r2","yOver","Number","MAX_VALUE","xOver","overMax","over","min","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","length","batchUpdate","copyNodes","commit","dir","sort","_updating","newY","i","_id","_idSeq","defaults","isNaN","cacheOneLayout","verify","samePos","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","some","triggerAddEvent","dup","prepareNode","_removeDOM","floor","_fixCollisions","triggerEvent","_layouts","changedPosConstrain","clonedNode","clone","map","canMove","c","content","prevPos","collideAll","needToMove","collideCoverage","reduce","saveElement","widgets","key","_ignoreLayoutsNodeChange","layout","l","ratio","oldColumn","cacheLayout","cacheNodes","lastIndex","cacheNode","j","findIndex","newNodes","splice","move","scale","clear","copy","index","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","auto","minWidth","animate","alwaysShowResizeHandle","autoHide","handles","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","getAttribute","toBool","_styleSheetClass","random","toFixed","initMargin","_widthOrContainer","_prevColumn","style","direction","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","cbNodes","_updateStyles","elements","getGridItems","parseInt","e","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","parent","contains","doc","implementation","createHTMLDocument","body","innerHTML","class","children","init","load","_placeholder","placeholderChild","createElement","className","arguments","warn","id","addWidget","domAttr","_insertNotAppend","prepend","addGrid","saveContent","saveGridOpt","list","save","sub","removeInternalAndSame","addAndRemove","items","removed","removeWidget","item","update","forcePixel","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","compact","domNodes","updateNodeWidths","from","setStatic","parentNode","removeChild","removeAll","_removeStylesheet","removeAttribute","useDocRelative","containerPos","documentElement","scrollTop","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","noData","detail","addEventListener","log","removeEventListener","doAnimate","updateClass","m","keys","k","changed","ddChanged","value","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","getHeight","rows","cssMinHeight","getComputedStyle","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","oneColumn","changedOneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","bind","margins","Engine","_disabled","_eventRegister","eventName","disabled","DDDraggable","DDBaseImplement","option","super","dragging","containmentRect","offset","substring","dragEl","_dragStart","_drag","_dragEnd","forDestroy","destroy","Object","DDManager","dragElement","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","ev","DDUtils","initEvent","_setupDragFollowNodeNotifyStart","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","preventDefault","_dragFollow","clearTimeout","paintTimer","cancelAnimationFrame","parentOriginStylePosition","_removeHelperStyle","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","basePosition","zIndex","requestAnimationFrame","clientX","clientY","match","img","dataTransfer","setDragImage","stopPropagation","xformOffsetX","xformOffsetY","testEl","addElStyles","opacity","testElPosition","targetOffset","DDDroppable","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","moving","_removeLeaveCallbacks","_canDrop","_ui","relatedTarget","out","drop","DDElement","ddElement","ddDraggable","ddDroppable","ddResizable","updateOption","DDResizable","DDResizableHandle","host","_mouseDown","_mouseMove","_mouseUp","_init","userSelect","mouseDownEvent","s","abs","_showHandlers","_hideHandlers","newRect","originalRect","scrolled","temporalRect","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","handlerDirection","handlers","trim","_resizeStart","_resizeStop","_resizing","scrollEl","getScrollElement","scrollY","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","oEvent","offsetX","offsetY","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","maxHeight","minHeight","containmentEl","test","styles","info","evt","obj","button","which","buttons","cancelable","isEventSupportPassiveOption","supportsPassive","passiveTest","GridStackDDNative","_getDDElements","dEl","cleanResizable","setupResizable","cleanDraggable","setupDraggable","containment","dragOut","_accept","cleanDroppable","setupDroppable","create","hosts","d","f","oldName","newName","rev","wrapper","args","apply","oldAttr","querySelectorAll","getElementById","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","minMax","func","delay","isWaiting","scrollingElement","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"gridstack-h5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * gridstack-dd.ts 4.2.5\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack, MousePosition } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * TODO: no code hint in code below as this is <any> so look at alternatives ?\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || !this.opts.acceptWidgets) {\r\n    GridStackDD.get().droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let gridPos: MousePosition;\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let rec = helper.getBoundingClientRect();\r\n    let left = rec.left - gridPos.left;\r\n    let top = rec.top - gridPos.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          GridStackDD.get().off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node && node.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node && node.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node && node.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // TEST console.log('dropover without leave');\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // get grid screen coordinates and cell dimensions\r\n      let box = this.el.getBoundingClientRect();\r\n      gridPos = {top: box.top, left: box.left};\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // TEST console.log('dropover cloning node');\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node && node.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // TEST console.log('drop delete _gridstackNodeOrig')\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n        // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(_dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  let dragIn: string;\r\n  let dragInOptions: DDDragInOpt;\r\n  const dragInDefaultOptions: DDDragInOpt = {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  };\r\n\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  let dd = GridStackDD.get();\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  let dd = GridStackDD.get();\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      dd.remove(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        dd.remove(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        if (!node._temporaryRemoved) {\r\n          // move to new placeholder location\r\n          Utils.removePositioningStyles(target);\r\n          this._writePosAttr(target, node);\r\n        } else {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.removePositioningStyles(target);\r\n          Utils.copyPos(node, node._orig);\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n\r\n      this._extraDragRow = 0;\r\n      this._updateContainerHeight();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    dd.draggable(el, 'disable');\r\n    el.classList.add('ui-draggable-disabled');\r\n  } else {\r\n    dd.draggable(el, 'enable');\r\n    el.classList.remove('ui-draggable-disabled');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    dd.resizable(el, 'disable');\r\n    el.classList.add('ui-resizable-disabled');\r\n  } else {\r\n    dd.resizable(el, 'enable');\r\n    el.classList.remove('ui-resizable-disabled');\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // TEST console.log('_onStartMoving placeholder')\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // TEST console.log('engine.addNode x=' + node.x);\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n  if (event.type === 'resizestart') {\r\n    let dd = GridStackDD.get()\r\n      .resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  GridStackDD.get().off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // TEST console.log('leave delete _gridstackNodeOrig')\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -this.opts.marginRight : this.opts.marginLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -this.opts.marginBottom : this.opts.marginTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }\r\n      this._extraDragRow = extra;\r\n    } else this._extraDragRow = 0;\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - this.opts.marginLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - this.opts.marginTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + this.opts.marginLeft;\r\n    let top = ui.position.top + this.opts.marginTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + this.opts.marginLeft,\r\n    y: ui.position.top + this.opts.marginTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - this.opts.marginLeft - this.opts.marginRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - this.opts.marginTop - this.opts.marginBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }\r\n    this._extraDragRow = 0;\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n","/**\r\n * gridstack-ddi.ts 4.2.5\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","/**\r\n * gridstack-engine.ts 4.2.5\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { Utils } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n/** options used for creations - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: onChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onChange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal true if we have some items locked */\r\n  private _hasLocked: boolean;\r\n  /** @internal unique global internal _id counter NOT starting at 0 */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.onChange = opts.onChange;\r\n    this._float = opts.float;\r\n    this.maxRow = opts.maxRow;\r\n    this.nodes = opts.nodes || [];\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    this.saveInitial(); // since begin update (which is called multiple times) won't do this\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    return this._packNodes()\r\n      ._notify();\r\n  }\r\n\r\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n  private _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\r\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n  }\r\n\r\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n   * return true if we moved. */\r\n  private _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\r\n    this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n\r\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n    if (!collide) return false;\r\n\r\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n    if (node._moving && !opt.nested && !this.float) {\r\n      if (this.swap(node, collide)) return true;\r\n    }\r\n\r\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n    let area = nn;\r\n    if (this._useEntireRowArea(node, nn)) {\r\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n      collide = this.collide(node, area, opt.skip); // force new hit\r\n    }\r\n\r\n    let didMove = false;\r\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\r\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n      let moved: boolean;\r\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n      // but remember that skip down so we only do this once (and push others otherwise).\r\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n        // can take space we had, or before where we're going\r\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\r\n        node._skipDown = (node._skipDown || nn.y > node.y);\r\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\r\n        if (collide.locked && moved) {\r\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n        } else if (!collide.locked && moved && opt.pack) {\r\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n          this._packNodes();\r\n          nn.y = collide.y + collide.h;\r\n          Utils.copyPos(node, nn);\r\n        }\r\n        didMove = didMove || moved;\r\n      } else {\r\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\r\n      }\r\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n      collide = undefined;\r\n    }\r\n    return didMove;\r\n  }\r\n\r\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\r\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\r\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n\r\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\r\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\r\n    if (!o.rect || !node._rect) return;\r\n    let r0 = node._rect; // where started\r\n    let r = {...o.rect}; // where we are\r\n\r\n    // update dragged rect to show where it's coming from (above or below, etc...)\r\n    if (r.y > r0.y) {\r\n      r.h += r.y - r0.y;\r\n      r.y = r0.y;\r\n    } else {\r\n      r.h += r0.y - r.y;\r\n    }\r\n    if (r.x > r0.x) {\r\n      r.w += r.x - r0.x;\r\n      r.x = r0.x;\r\n    } else {\r\n      r.w += r0.x - r.x;\r\n    }\r\n\r\n    let collide: GridStackNode;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let r2 = n._rect; // overlapping target\r\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n      // depending on which side we started from, compute the overlap % of coverage\r\n      // (ex: from above/below we only compute the max horizontal line coverage)\r\n      if (r0.y < r2.y) { // from above\r\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\r\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n      }\r\n      if (r0.x < r2.x) { // from the left\r\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\r\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n      }\r\n      let over = Math.min(xOver, yOver);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    return collide;\r\n  }\r\n\r\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\r\n  {\r\n    this.nodes.forEach(n =>\r\n      n._rect = {\r\n        y: n.y * h + top,\r\n        x: n.x * w + left,\r\n        w: n.w * w - left - right,\r\n        h: n.h * h - top - bottom\r\n      }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\r\n    if (!b || b.locked || !a || a.locked) return false;\r\n\r\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\r\n      let x = b.x, y = b.y;\r\n      b.x = a.x; b.y = a.y; // b -> a position\r\n      if (a.h != b.h) {\r\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\r\n      } else {\r\n        a.x = x; a.y = y; // a -> old b position\r\n      }\r\n      a._dirty = b._dirty = true;\r\n      return true;\r\n    }\r\n    let touching: boolean; // remember if we called it (vs undefined)\r\n\r\n    // same size and same row or column, and touching\r\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\r\n      return _doSwap();\r\n    if (touching === false) return; // ran test and fail, bail out\r\n\r\n    // check for taking same columns (but different height) and touching\r\n    if (a.w === b.w && a.x === b.x && (touching || Utils.isTouching(a, b))) {\r\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\r\n      return _doSwap();\r\n    }\r\n\r\n    /* different X will be weird (expect vertical swap) and different height overlap, so too complex. user regular layout instead\r\n    // else check if swapping would not collide with anything else (requiring a re-layout)\r\n    if (!this.collide(a, {x: a.x, y: a.y, w: b.w, h: b.h}, b) &&\r\n        !this.collide(a, {x: b.x, y: b.y, w: a.w, h: a.h}, b))\r\n      return _doSwap(); */\r\n    return false;\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    return !this.collide(nn);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) return this;\r\n    this.batchUpdate()\r\n      ._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // will force attr update\r\n    });\r\n    return this.commit();\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) return;\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes()._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes(); // first to last\r\n\r\n    if (this.float) {\r\n      // restore original Y pos\r\n      this.nodes.forEach(n => {\r\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\r\n        let newY = n.y;\r\n        while (newY > n._orig.y) {\r\n          --newY;\r\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!collide) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // top gravity pack\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) return;\r\n        while (n.y > 0) {\r\n          let newY = i === 0 ? 0 : n.y - 1;\r\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!canBeMoved) break;\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    return this.nodeBoundFix(node, resizing);\r\n  }\r\n\r\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\r\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      // if user loaded a larger than allowed widget for current # of columns,\r\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\r\n      if (this.column < 12) {\r\n        node.w = Math.min(12, node.w);\r\n        this.cacheOneLayout(node, 12);\r\n      }\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original x,y,w,h instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\r\n    }\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal call this to call onChange CB with dirty nodes */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    this.onChange && this.onChange(dirtyNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  /** @internal remove dirty and last tried info */\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.nodes.forEach(n => {\r\n      delete n._dirty;\r\n      delete n._lastTried;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size to track real dirty state.\r\n   * Note: should be called right after we call change event (so next API is can detect changes)\r\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._orig = Utils.copyPos({}, n);\r\n      delete n._dirty;\r\n    });\r\n    this._hasLocked = this.nodes.some(n => n.locked);\r\n    return this;\r\n  }\r\n\r\n  /** @internal restore all the nodes back to initial values (called when we leave) */\r\n  public restoreInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      if (Utils.samePos(n, n._orig)) return;\r\n      Utils.copyPos(n, n._orig);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** call to add the given node to our list, fixing collision and re-packing */\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    let dup: GridStackNode;\r\n    if (dup = this.nodes.find(n => n._id === node._id)) return dup; // prevent inserting twice! return it instead.\r\n\r\n    node = this.prepareNode(node);\r\n    delete node._temporaryRemoved;\r\n    delete node._removeDOM;\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    triggerAddEvent && this.addedNodes.push(node);\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes()\r\n      ._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (!this.nodes.find(n => n === node)) {\r\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\r\n      return this;\r\n    }\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    return this._packNodes()\r\n      ._notify(node);\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) return this;\r\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    return this._notify(this.removedNodes);\r\n  }\r\n\r\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n   * others in a clone first, then apply those changes if still within specs. */\r\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    // if (node.locked) return false;\r\n    if (!this.changedPosConstrain(node, o)) return false;\r\n    o.pack = true;\r\n\r\n    // simpler case: move item directly...\r\n    if (!this.maxRow/* && !this._hasLocked*/) {\r\n      return this.moveNode(node, o);\r\n    }\r\n\r\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n    if (!clonedNode) return false;\r\n\r\n    let canMove = clone.moveNode(clonedNode, o);\r\n    // if maxRow make sure we are still valid size\r\n    if (this.maxRow && canMove) {\r\n      canMove = (clone.getRow() <= this.maxRow);\r\n      // turns out we can't grow, then see if we can swap instead (ex: full grid)\r\n      if (!canMove) {\r\n        let collide = this.collide(node, o);\r\n        if (collide && this.swap(node, collide)) {\r\n          this._notify();\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    if (!canMove) return false;\r\n\r\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\r\n    clone.nodes.filter(n => n._dirty).forEach(c => {\r\n      let n = this.nodes.find(a => a._id === c._id);\r\n      if (!n) return;\r\n      Utils.copyPos(n, c);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return true;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    delete node._willFitPos;\r\n    if (!this.maxRow) return true;\r\n    // create a clone with NO maxRow and check if still within size\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\r\n    this.cleanupNode(n);\r\n    delete n.el; delete n._id; delete n.content; delete n.grid;\r\n    clone.addNode(n);\r\n    if (clone.getRow() <= this.maxRow) {\r\n      node._willFitPos = Utils.copyPos({}, n);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** true if x,y or w,h are different after clamping to min/max */\r\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\r\n    // make sure w,h are set\r\n    p.w = p.w || node.w;\r\n    p.h = p.h || node.h;\r\n    if (node.x !== p.x || node.y !== p.y) return true;\r\n    // check constrained w,h\r\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\r\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\r\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\r\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\r\n    return (node.w !== p.w || node.h !== p.h);\r\n  }\r\n\r\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (!node || /*node.locked ||*/ !o) return false;\r\n    if (o.pack === undefined) o.pack = true;\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    if (typeof o.x !== 'number') { o.x = node.x; }\r\n    if (typeof o.y !== 'number') { o.y = node.y; }\r\n    if (typeof o.w !== 'number') { o.w = node.w; }\r\n    if (typeof o.h !== 'number') { o.h = node.h; }\r\n    let resizing = (node.w !== o.w || node.h !== o.h);\r\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\r\n    Utils.copyPos(nn, o);\r\n    nn = this.nodeBoundFix(nn, resizing);\r\n    Utils.copyPos(o, nn);\r\n\r\n    if (Utils.samePos(node, o)) return false;\r\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\r\n\r\n    // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\r\n    let area = nn;\r\n    // if (this._useEntireRowArea(node, nn)) {\r\n    //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n    // }\r\n\r\n    // check if we will need to fix collision at our new location\r\n    let collides = this.collideAll(node, area, o.skip);\r\n    let needToMove = true;\r\n    if (collides.length) {\r\n      // now check to make sure we actually collided over 50% surface area while dragging\r\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\r\n      if (collide) {\r\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n      } else {\r\n        needToMove = false; // we didn't cover >50% for a move, skip...\r\n      }\r\n    }\r\n\r\n    // now move (to the original ask vs the collision version which might differ) and repack things\r\n    if (needToMove) {\r\n      node._dirty = true;\r\n      Utils.copyPos(node, nn);\r\n    }\r\n    if (o.pack) {\r\n      this._packNodes()\r\n        ._notify();\r\n    }\r\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (!node._updating) {\r\n      node._updating = true;\r\n      delete node._skipDown;\r\n      if (!this.batchMode) this.saveInitial();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      delete n._skipDown;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    this._sortNodes();\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          if (!node._orig) return; // didn't change (newly added ?)\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._orig.y) {\r\n            n.y += (node.y - node._orig.y);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._orig.x) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._orig.w) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) return this;\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n   * @param node single node to cache\r\n   * @param column corresponding column index to save it under\r\n   */\r\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\r\n    n._id = n._id || GridStackEngine._idSeq++;\r\n    let layout: Layout = {x: n.x, y: n.y, w: n.w, _id: n._id}\r\n    this._layouts = this._layouts || [];\r\n    this._layouts[column] = this._layouts[column] || [];\r\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\r\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values but the _id */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n","/**\r\n * index-h5.ts 4.2.5 - everything you need for a Grid that uses HTML5 native drag&drop\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\nexport * from './h5/gridstack-dd-native';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","/*!\r\n * GridStack 4.2.5\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\n\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, {...options});\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, {...options});\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  private _placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  private _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  private _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  private _extraDragRow = 0;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...GridDefaults,\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\r\n      this._prevColumn = this.opts.column;\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    this.engine = new GridStackEngine({\r\n      column: this.opts.column,\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = {...(options || {})};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // check if nested grid definition is present\r\n    if (node.subGrid && !(node.subGrid as GridStack).el) { // see if there is a sub-grid to create too\r\n      let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n      node.subGrid = GridStack.addGrid(content, node.subGrid as GridStackOptions);\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.\r\n   * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content as well\r\n    if (saveContent) {\r\n      list.forEach(n => {\r\n        if (n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n          let sub = n.el.querySelector('.grid-stack-item-content');\r\n          n.content = sub ? sub.innerHTML : undefined;\r\n          if (!n.content) delete n.content;\r\n          delete n.el;\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n\r\n      // check for nested grid\r\n      list.forEach(n => {\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, saveGridOpt) as GridStackOptions;\r\n        }\r\n      })\r\n\r\n      let o: GridStackOptions = {...this.opts};\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.opts.column); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else do entire grid and # of rows\r\n    // or get first cell height ?\r\n    // let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    // let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    // return Math.round(el.offsetHeight / height);\r\n    return Math.round(this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'));\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.opts.column;\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  private _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (this.opts.column === column) return this;\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = {...opt}; // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  private _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\r\n    let changedOneColumn = false;\r\n\r\n    if ((this.opts.column === 1) !== oneColumn) {\r\n      changedOneColumn = true;\r\n      if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n      this.column(oneColumn ? 1 : this._prevColumn);\r\n      if (this.opts.animate) { this.setAnimation(true); }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedOneColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed to/from oneColumn or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in gridstack-dd.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n}\r\n","/**\n * dd-base-impl.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  private _disabled = false;\n  /** @internal */\n  private _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  private dragOffset: DragOffset;\n  /** @internal */\n  private dragElementOriginStyle: Array<string>;\n  /** @internal */\n  private dragFollowTimer: number;\n  /** @internal */\n  private dragEl: HTMLElement;\n  /** @internal */\n  private dragging = false;\n  /** @internal */\n  private paintTimer: number;\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private helperContainment: HTMLElement;\n  /** @internal */\n  private static basePosition: 'fixed' | 'absolute' = 'absolute';\n  /** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\n  private static dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal */\n  private static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this.enable();\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.dragEl.draggable = true;\n    this.dragEl.addEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    super.disable();\n    this.dragEl.removeAttribute('draggable');\n    this.dragEl.removeEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal */\n  private _dragStart(event: DragEvent): void {\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  private _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.dragEl.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _drag(event: DragEvent): void {\n    // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\n    // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\n    event.preventDefault();\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  private _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.dragEl.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  private _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = DDUtils.clone(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  private _setupHelperStyle(): DDDraggable {\n    this.helper.style.pointerEvents = 'none';\n    this.helper.style.width = this.dragOffset.width + 'px';\n    this.helper.style.height = this.dragOffset.height + 'px';\n    this.helper.style.willChange = 'left, top';\n    this.helper.style.transition = 'none'; // show up instantly\n    this.helper.style.position = this.option.basePosition || DDDraggable.basePosition;\n    this.helper.style.zIndex = '1000';\n    setTimeout(() => {\n      if (this.helper) {\n        this.helper.style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  private _removeHelperStyle(): DDDraggable {\n    // don't bother restoring styles if we're gonna remove anyway...\n    let node = this.helper ? (this.helper as GridItemHTMLElement).gridstackNode : undefined;\n    if (!node || !node._isAboutToRemove) {\n      DDDraggable.originStyleProp.forEach(prop => {\n        this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\n      });\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  private _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  private _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.option.basePosition !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal prevent the default gost image to be created (which has wrongas we move the helper/element instead\n   * (legacy jquery UI code updates the top/left of the item).\n   * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\n   * the actual grid-item but move the gost image around (and special case jq version) ?\n   **/\n  private _cancelDragGhost(e: DragEvent): DDDraggable {\n    /* doesn't seem to do anything...\n    let t = e.dataTransfer;\n    t.effectAllowed = 'none';\n    t.dropEffect = 'none';\n    t.setData('text', '');\n    */\n\n    // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\n    let img = document.createElement('div');\n    img.style.width = '1px';\n    img.style.height = '1px';\n    document.body.appendChild(img);\n    e.dataTransfer.setDragImage(img, 0, 0);\n    setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\n\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  private _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n","/**\n * dd-droppable.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  private moving: boolean;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) return;\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(forDestroy=false): void {\n    if (this.disabled) return;\n    super.disable();\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    if (this.moving) {\n      this._removeLeaveCallbacks();\n    } \n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    delete this.moving;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  private _dragEnter(event: DragEvent): void {\n    if (!this._canDrop()) return;\n    event.preventDefault();\n\n    if (this.moving) return; // ignore multiple 'dragenter' as we go over existing items\n    this.moving = true;\n\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.addEventListener('dragover', this._dragOver);\n    this.el.addEventListener('drop', this._drop);\n    this.el.addEventListener('dragleave', this._dragLeave);\n    this.el.classList.add('ui-droppable-over');\n  }\n\n  /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\n  private _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  private _dragLeave(event: DragEvent): void {\n\n    // ignore leave events on our children (get when starting to drag our items)\n    // Note: Safari Mac has null relatedTarget which causes #1684 so check if DragEvent is inside the grid instead\n    if (!event.relatedTarget) {\n      const { bottom, left, right, top } = this.el.getBoundingClientRect();\n      if (event.x < right && event.x > left && event.y < bottom && event.y > top) return;\n    } else if (this.el.contains(event.relatedTarget as HTMLElement)) return;\n\n    this._removeLeaveCallbacks();\n    if (this.moving) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n    delete this.moving;\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  private _drop(event: DragEvent): void {\n    if (!this.moving) return; // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n    delete this.moving;\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  private _removeLeaveCallbacks() {\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    this.el.classList.remove('ui-droppable-over');\n    if (this.moving) {\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n    }\n    // Note: this.moving is reset by callee of this routine to control the flow\n  }\n\n  /** @internal */\n  private _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  private _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\n * dd-manager.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n","/**\n * dd-resizable-handle.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  private el: HTMLElement;\n  /** @internal */\n  private host: HTMLElement;\n  /** @internal */\n  private option: DDResizableHandleOpt;\n  /** @internal */\n  private dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  private moving = false;\n  /** @internal */\n  private mouseDownEvent: MouseEvent;\n  /** @internal */\n  private static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  private _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  private _mouseDown(e: MouseEvent): void {\n    e.preventDefault();\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp);\n  }\n\n  /** @internal */\n  private _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    // don't start unless we've moved at least 3 pixels\n    if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n    } else if (this.moving) {\n      this._triggerEvent('move', e);\n    }\n  }\n\n  /** @internal */\n  private _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    delete this.moving;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  private _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { Utils } from '../utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  private handlers: DDResizableHandle[];\n  /** @internal */\n  private originalRect: Rect;\n  /** @internal */\n  private temporalRect: Rect;\n  /** @internal */\n  private scrollY: number;\n  /** @internal */\n  private scrolled: number;\n  /** @internal */\n  private scrollEl: HTMLElement;\n  /** @internal */\n  private startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  private elOriginStyleVal: string[];\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    this.enable();\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  private _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = this.option.basePosition || 'absolute'; // or 'fixed'\n    this.el.style.opacity = '0.8';\n    this.el.style.zIndex = '1000';\n    return this;\n  }\n\n  /** @internal */\n  private _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  private _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    \n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  private _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  private _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  private _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  private _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-utils.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.appendChild(el);\n    }\n  }\n\n  public static setPositionRelative(el: HTMLElement): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      target: info.target ? info.target : e.target\n    };\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n    if ((e as DragEvent).dataTransfer) {\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\n    }\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\n    return {...evt, ...obj} as unknown as T;\n  }\n}","/**\n * gridstack-dd-native.ts 4.2.5\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  private _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n","/**\r\n * utils.ts 4.2.5\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, minMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (!minMax) return a;\r\n    if (b.minW) a.minW = b.minW;\r\n    if (b.minH) a.minH = b.minH;\r\n    if (b.maxW) a.maxW = b.maxW;\r\n    if (b.maxH) a.maxH = b.maxH;\r\n    return a;\r\n  }\r\n\r\n  /* true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      } else if (val === b[key] || key[0] === '_') { delete a[key] }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement;\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(930);\n"],"sourceRoot":""}